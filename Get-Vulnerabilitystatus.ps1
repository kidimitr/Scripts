function Get-Vulnerabilitystatus {
  <#
.SYNOPSIS
Gets status of vulnerability patch.
.DESCRIPTION
Queries a server/s for OS version and matches that to the 
KB that is supposed to be installed and outputs result.
.PARAMETER Server
Input server/s to query
.EXAMPLE
Get-Vulnerabilystatus -Server czchows6304
#>
  param([Parameter(Mandatory=$true)][string[]]$Servers)
  

$2016 = 'KB4534271'
$2012R2 = 'KB4534297'
$2008R2 = 'KB4534310'
$2008 = 'KB4534303'
$OSversions = @()
$Results = @()
  
  foreach($server in $servers){try {  

      $CIMOS = Get-CimInstance -ComputerName $server -ClassName win32_operatingsystem  -ErrorAction Stop | Select-Object -Property  @{N='Name';E={$_.Name.split("|")[0]}},OSArchitecture

      if(!$CIMOS -eq $false){$CIMOS = $CIMOS}else{ $CIMOS = Get-WmiObject -ComputerName $server -Class win32_operatingsystem -ErrorAction Stop | Select-Object -Property  @{N='Name';E={$_.Name.split("|")[0]}},OSArchitecture}
   
      $myobject =  [PSCustomObject]@{
        Name = $CIMOS.Name
        OSArchitecture = $CIMOS.OSArchitecture
        Server = $server
        
      }
     }

    catch{  
      $myobject = [pscustomobject] @{
        
        Name = 'Could not connect'
        OSArchitecture = 'Could not connect'
        Server = $server
        
      }
    }
       $OSversions += $myobject
}
  
  
 foreach ($OSversion in $OSversions){
 
     $2016match = $OSVersion.Name -match '2016'
     $2012R2match = $OSVersion.Name -match '2012 R2'
     $2008R2match = $OSVersion.Name -match '2008 R2'
     $2008match = $OSVersion.Name -match '2008'

        
       if ($2016match -eq $true){try {$HOTFIX = Get-HotFix -ComputerName $OSversion.server -Id $2016 -ErrorAction SilentlyContinue}catch{$HOTFIX = 'Not present'}}
       elseif($2012R2match -eq $true){try{$HOTFIX = Get-HotFix -ComputerName $OSversion.server -Id $2012R2 -ErrorAction Stop}catch{$HOTFIX = 'Not present'}}
       elseif($2008R2match -eq $true){try{$HOTFIX = Get-HotFix -ComputerName $OSversion.server -Id $2008R2 -ErrorAction SilentlyContinue}catch{$HOTFIX = 'Not present'}}
       elseif($2008match -eq $true){try{$HOTFIX = Get-HotFix -ComputerName $OSversion.server -Id $2008 -ErrorAction SilentlyContinue}catch{$HOTFIX = 'Not present'}}else{$HOTFIX = 'Not present'}
  
    
   
   $myobject = [pscustomobject] @{
        Name = $OSversion.Name
        Server = $OSversion.Server
        OsArchitecture = $OSversion.OsArchitecture
        Hotfix = if(!$HOTFIX.hotfixid -eq $false){$HOTFIX.hotfixid}else{$HOTFIX}
    }
  $Results += $myobject
 }
 $Results | Select-Object -Property Name,Server,Osarchitecture,Hotfix
 
}
